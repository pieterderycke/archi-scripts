/*
 * Load Archimate relationships from CSV
 * 
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 * Requires PapaParse - https://www.papaparse.com/
 * Based on the LoadCsv script of Steven Mileham
 * (C) Pieter De Rycke 2021
 */

var DEBUG = true;
var UNIQUE_KEY = null;

console.show();
console.clear();
console.log("> Import CSV");

load(__DIR__ + "lib/papaparse.min.js");

console.log("> Loaded Papa Parse");

var filePath = window.promptOpenFile({ title: "Open CSV", filterExtensions: ["*.csv"], fileName: "relationships.csv" });
if (filePath) {
    var data = readCsvFile(filePath);

    var headers = data[0];

    for (var i=1; i < data.length-1; i++) {
        var archimateRelationship = null;
        var row = [];
        for (var j=0; j<headers.length; j++) {
            row[headers[j]]=data[i][j];
        }

        var archimateRelationships = findRelationships(row.Type, row.Source, row.Target);
        console.log(archimateRelationships);

        if (!archimateRelationships || archimateRelationships.length != 1) {
            DEBUG && UNIQUE_KEY ? console.log("Unique Archimate Relationship \"" + row.Type + "[" + UNIQUE_KEY + ":" + row[UNIQUE_KEY] + ", source:" + row.Source + ", target:" + row.Target + "]" +"\" not found; creating a new one..") : true;
            DEBUG && !UNIQUE_KEY ? console.log("Unique Archimate Relationship \"" + row.Type + "[source:" + row.Source + ", target:" + row.Target + "]" +"\" not found; creating a new one..") : true;

            if($("." + row.Source).size() == 0)
                console.error("No element with the name \"" + row.Source + "\" found.");
            
            if($("." + row.Source).size() > 1)
                console.error("More than element with the name \"" + row.Source + "\" found.");

            if($("." + row.Target).size() == 0)
                console.error("No element with the name \"" + row.Target + "\" found.")

            if($("." + row.Target).size() > 1)
                console.error("More than element with the name \"" + row.Target + "\" found.");

            source = $("." + row.Source).first();
            target = $("." + row.Target).first();

            DEBUG ? console.log("Creating Concept"):true;
            archimateRelationship = model.createRelationship(row.Type, row.Name, source, target);
        }
        else {
            DEBUG && UNIQUE_KEY ? console.log("Existing unique Archimate relationship \"" + row.Type + "[" + UNIQUE_KEY + ":" + row[UNIQUE_KEY] + ", source:" + row.Source + ", target:" + row.Target + "]" +"\" found.") : true;
            DEBUG && !UNIQUE_KEY ? console.log("Existing unique Archimate relationship \"" + row.Type + "[source:" + row.Source + ", target:" + row.Target + "]" +"\" found.") : true;

            archimateRelationship = archimateRelationships[0];
        }

        DEBUG? console.log(archimateRelationship):true;

        archimateRelationship.name = row.Name;
        archimateRelationship.documentation = row.Documentation;
        archimateRelationship.type = row.Type;

        for (var j = 0; j < headers.length; j++) {
            switch (headers[j]) {
                case "Name":
                case "Documentation":
                case "Type":
                    break;
                default:
                    if (row[headers[j]]) {
                        archimateRelationship.prop(headers[j],row[headers[j]]);
                    }
                    else {
                        archimateRelationship.removeProp(headers[j]);
                    }
            }
        }

    }
    console.log("Parsing Complete")
}
else {
    console.log("Cancelled");
}

function readCsvFile(filePath) {
    var FileReader = Java.type("java.io.FileReader");
    var theCSVFile = new FileReader(filePath);

    var theCSV ="";

    var data = theCSVFile.read();
    while(data != -1) {
        var theCharacter = String.fromCharCode(data);
        theCSV += theCharacter;
        data = theCSVFile.read();
    }
    theCSVFile.close();

    console.log("File \"" + filePath + "\" Loaded.");
    theDataFile = Papa.parse(theCSV);

    return theDataFile.data;
}

function findRelationships(archimateType, source, target) {
    var archimateRelationships = null;

    if(UNIQUE_KEY) {
        archimateRelationships = $(archimateType).filter(function(object) { 
            switch(UNIQUE_KEY) {
                case "Name": 
                    return object.name == row[UNIQUE_KEY];
                default:
                    return object.prop(UNIQUE_KEY) == row[UNIQUE_KEY];
            }
        });
    }
    else
        archimateRelationships = $(archimateType);

    archimateRelationships = archimateRelationships.filter(function(relationship) {
        return relationship.source.name == source && relationship.target.name == target;
    });

    return archimateRelationships;
}