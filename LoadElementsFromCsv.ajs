/*
 * Import from CSV
 * 
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 * Requires PapaParse - https://www.papaparse.com/
 * 
 * Based on the LoadCsv script of Steven Mileham (but further enhanced)
 * (C) Pieter De Rycke 2021
 */

var DEBUG = true;
var UNIQUE_KEY = "Name";

console.show();
console.clear();
console.log("Import CSV");

load(__DIR__ + "lib/papaparse.min.js");

var filePath = window.promptOpenFile({ title: "Open CSV", filterExtensions: ["*.csv"], fileName: "elements.csv" });
if (filePath) {
    var data = readCsvFile(filePath);

    theDataHeaders = data[0];

    var commonProperties = ["Name", "Documentation", "Type"];

    for (var i=1; i < data.length-1; i++) {
        var archimateElement = null;
        var row = [];
        for (var j=0; j<theDataHeaders.length; j++) {
            row[theDataHeaders[j]] = data[i][j];
        }

        DEBUG ? console.log("Looking up " + row.Type + "[" + UNIQUE_KEY + ":" + row[UNIQUE_KEY] + "].") : true;

        archimateElement = $(row.Type).filter(function(object) { 
            switch(UNIQUE_KEY) {
                case "Name": 
                    return object.name == row[UNIQUE_KEY];
                default:
                    return object.prop(UNIQUE_KEY) == row[UNIQUE_KEY];
            }
        });

        if (!archimateElement || archimateElement.length != 1) {
            DEBUG ? console.log("Unique Archimate element \"" + row.Type + "[" + UNIQUE_KEY + ":" + row[UNIQUE_KEY] + "]" +"\" not found; creating a new one.") : true;

            archimateElement = model.createElement(row.Type, row.Name, getFolder(row.Type, row.Folder));
        }
        else {
            DEBUG ? console.log("Existing unique Archimate element \"" + row.Type + "[" + UNIQUE_KEY + ":" + row[UNIQUE_KEY] + "]" +"\" found.") : true;

            archimateElement = archimateElement[0];

            if(row.Folder) {
                getFolder(row.Type, row.Folder).add(archimateElement);
            }
        }

        DEBUG ? console.log(archimateElement) : true;

        archimateElement.name = row.Name;
        archimateElement.documentation = row.Documentation;
        archimateElement.type = row.Type;

        for (var j=0; j<theDataHeaders.length; j++) {
            switch (theDataHeaders[j]) {
                case "Name":
                case "Documentation":
                case "Type":
                case "Folder":
                    break;
                default:
                    if (row[theDataHeaders[j]]) {
                        archimateElement.prop(theDataHeaders[j],row[theDataHeaders[j]]);
                    }
                    else {
                        archimateElement.removeProp(theDataHeaders[j]);
                    }
            }
        }

    }
    console.log("Parsing Complete.")
}
else {
    console.log("Cancelled.");
}

function readCsvFile(filePath) {
    var FileReader = Java.type("java.io.FileReader");
    var theCSVFile = new FileReader(filePath);

    var theCSV ="";

    var data = theCSVFile.read();
    while(data != -1) {
        var theCharacter = String.fromCharCode(data);
        theCSV+=theCharacter;
        data = theCSVFile.read();
    }
    theCSVFile.close();

    console.log("File \"" + filePath + "\" Loaded.");
    theDataFile = Papa.parse(theCSV);

    return theDataFile.data;
}

function getFolder(archimateType, folderName) {
    if(folderName) {
        var layer;

        switch(archimateType) {
            case "data-object":
                layer = "Application";
            default:
                layer = archimateType.split("-")[0];
                layer = layer[0].toUpperCase() + layer.substring(1);
        }

        var rootFolder = $("folder." + layer).first();

        folder = $(rootFolder).find("folder." + folderName).first();
        if(!folder) {
            folder = rootFolder.createFolder(folderName);
        }

        console.log(folder);

        return folder;
    }
    else
        return null;
}